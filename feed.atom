<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Articles</title>
  <id>http://www.dylanroy.com/feed.atom</id>
  <updated>2013-05-26T00:00:00Z</updated>
  <link href="http://www.dylanroy.com/" />
  <link href="http://www.dylanroy.com/feed.atom" rel="self" />
  <generator>Werkzeug</generator>
  <entry xml:base="http://www.dylanroy.com/feed.atom">
    <title type="text">How I Converted My Website To Static</title>
    <id>http://www.dylanroy.com/blog/how-i-converted-my-website-to-static/</id>
    <updated>2013-05-26T00:00:00Z</updated>
    <published>2013-05-26T00:00:00Z</published>
    <link href="http://www.dylanroy.com/blog/how-i-converted-my-website-to-static/" />
    <author>
      <name>Dylan Roy</name>
    </author>
    <content type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Harum, recusandae, non, voluptate quidem consequatur sed excepturi labore voluptatem corrupti veritatis velit magnam unde voluptatibus voluptatum reiciendis incidunt facilis enim repudiandae.&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Explicabo, qui, praesentium, a culpa sapiente quasi facilis vel ex est veritatis beatae debitis ad suscipit ducimus aliquid excepturi quod possimus et.&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem, iste, aspernatur, esse beatae ex dolor culpa unde officia soluta magnam similique reprehenderit quas debitis voluptates harum ipsam quasi itaque corporis.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::python
from urlparse import urljoin
from flask import request
from werkzeug.contrib.atom import AtomFeed


def make_external(url):
    return urljoin(request.url_root, url)


@app.route('/recent.atom')
def recent_feed():
    feed = AtomFeed('Recent Articles',
                    feed_url=request.url, url=request.url_root)
    articles = Article.query.order_by(Article.pub_date.desc()) \
                      .limit(15).all()
    for article in articles:
        feed.add(article.title, unicode(article.rendered_text),
                 content_type='html',
                 author=article.author.name,
                 url=make_external(article.url),
                 updated=article.last_update,
                 published=article.published)
    return feed.get_response()
&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  <entry xml:base="http://www.dylanroy.com/feed.atom">
    <title type="text">Some Useful LINQ Tips &amp; Tricks</title>
    <id>http://www.dylanroy.com/blog/some-useful-linq-tips-and-tricks/</id>
    <updated>2013-04-26T00:00:00Z</updated>
    <published>2013-04-26T00:00:00Z</published>
    <link href="http://www.dylanroy.com/blog/some-useful-linq-tips-and-tricks/" />
    <author>
      <name>Dylan Roy</name>
    </author>
    <content type="html">&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Harum, recusandae, non, voluptate quidem consequatur sed excepturi labore voluptatem corrupti veritatis velit magnam unde voluptatibus voluptatum reiciendis incidunt facilis enim repudiandae.&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Explicabo, qui, praesentium, a culpa sapiente quasi facilis vel ex est veritatis beatae debitis ad suscipit ducimus aliquid excepturi quod possimus et.&lt;/p&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Voluptatem, iste, aspernatur, esse beatae ex dolor culpa unde officia soluta magnam similique reprehenderit quas debitis voluptates harum ipsam quasi itaque corporis.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:::python
from urlparse import urljoin
from flask import request
from werkzeug.contrib.atom import AtomFeed


def make_external(url):
    return urljoin(request.url_root, url)


@app.route('/recent.atom')
def recent_feed():
    feed = AtomFeed('Recent Articles',
                    feed_url=request.url, url=request.url_root)
    articles = Article.query.order_by(Article.pub_date.desc()) \
                      .limit(15).all()
    for article in articles:
        feed.add(article.title, unicode(article.rendered_text),
                 content_type='html',
                 author=article.author.name,
                 url=make_external(article.url),
                 updated=article.last_update,
                 published=article.published)
    return feed.get_response()
&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
</feed>
